#Trevor Smith
#Assignment 6
#2/21/25
#Functions (continued)

import random #imports the random package

def purchase_item(itemPrice, startingMoney, quantityToPurchase=1):
    
    total_cost = itemPrice * quantityToPurchase # total cost of purchase

    if total_cost > startingMoney:
        quantityToPurchase = int(startingMoney // itemPrice) #how many can be bought with startingMoney

    leftover_money = startingMoney - (itemPrice * quantityToPurchase) #how much money is leftover
    
    return quantityToPurchase, leftover_money #returns the number to purchase and leftover money

#assigns the function to num_purchased, leftovermoney and tests them with print functions

print('purchase_item function')
print('----------------------')
print()
num_purchased, leftover_money = purchase_item(1.23, 10, 3) 
print("Test 1")
print(f'Number of items purchased: {num_purchased}')
print(f'Amount of money leftover: ${leftover_money: .2f}')
print()
num_purchased, leftover_money = purchase_item(1.23, 2.01, 3)
print("Test 2")
print(f'Number of items purchased: {num_purchased}')
print(f'Amount of money leftover: ${leftover_money: .2f}')
print()
num_purchased, leftover_money = purchase_item(3.41, 21.12)
print("Test 3")
print(f'Number of items purchased: {num_purchased}')
print(f'Amount of money leftover: ${leftover_money: .2f}')
print()
num_purchased, leftover_money = purchase_item(31.41, 21.12)
print("Test 4")
print(f'Number of items purchased: {num_purchased}')
print(f'Amount of money leftover: ${leftover_money: .2f}')

print() #adds space between functions
print("new_random_monster function")
print('---------------------------')
print() #adds space between print lines

def new_random_monster(): #creates a new function new_random_monster
  
    #creates a dictionary within a list
    monsters = [
        {   'name': 'Vampire',
            'description': 'Vampires are very dangerous at night, and causes death to a player if encountered within 5 feet.',
            'health_range': (10, 40),  
            'power_range': (5, 10),    
            'money_range': (3, 25)},
        {
            'name': 'Bigfoot',
            'description': 'Bigfoot specializes in camouflage, and can cause heavy damage to a player if encountered.',
            'health_range': (15, 75),    
            'power_range': (10, 20),     
            'money_range': (10, 50)},
        {
            'name': 'Dragon',
            'description': 'Dragons can breathe fire, causing heavy damage if burned, they can also capture players.',
            'health_range': (50, 100),
            'power_range': (20, 40),   
            'money_range': (50, 100)}
        ]
    
    # randomnly selects a monster from the list above
    monster = random.choice(monsters)
    
    # randomnly chooses a number for health, power, money within the range provided above
    health = random.randint(monster['health_range'][0], monster['health_range'][1])
    power = random.randint(monster['power_range'][0], monster['power_range'][1])
    money = random.randint(monster['money_range'][0], monster['money_range'][1])

    # creates and returns the monster dictionary
    return {
        'name': monster['name'],
        'description': monster['description'],
        'health': health,
        'power': power,
        'money': money
    }

#assigns my_monster with the function new_random_monster and calls the function 3 times
for _ in range(3):
    my_monster = new_random_monster()

    #prints the randomnly selected monster profile
    print(f"Monster: {my_monster['name']}")
    print(f"Description: {my_monster['description']}")
    print(f"Health: {my_monster['health']}")
    print(f"Power: {my_monster['power']}")
    print(f"Money: {my_monster['money']}")
    print()

print() #space in between function results

def print_welcome(name, width=20):
    """
    Prints a welcome for the supplied 'name' parameter.
    The output is centered on within a 20- character field.

    Parameters:
    name: string 
    width: int

    Return: none
    """
    # Print the welcome message, centered within the specified width
    print(f'{f"Hello, {name}!":^{width}}')

#Testing
print('print_welcome function')
print('----------------------')
print()
print_welcome("Jason")
print()
print_welcome("Charlie")
print()
print_welcome("Lexy")

print() #space in between function results


def print_shop_menu(item1Name, item1Price, item2Name, item2Price):
    """
    Prints a sign that contains a list of two items and their corresponding prices.
    Items are left-aligned in the menu, while the prices are right-aligned (with decimal points lining up).
    Prices are formatted to show 2 decimal places, and preceded with a dollar sign
    (with no space between the dollar sign and the price).
    The item name field has 12 characters, and the item price field has 8 characters.
    The sign is surrounded with a nice border to differentiate it from other text.

    Parameters:
    item1Name: string
    item1Price: float
    item2Name: string
    item2Price: float

    Return: none
    """

    print('/----------------------\\') #print border
    print(f'| {item1Name:<12} ${item1Price:>7.2f} |') #print the first item and price
    print(f'| {item2Name:<12} ${item2Price:>7.2f} |') #print the second item and price
    print('\\----------------------/') #print border


# Testing the function three times with different items and prices
print('print_shop_menu function')
print('------------------------')
print()
print_shop_menu('Bag of Chips', 7, 'Orange', 1.234)
print()
print_shop_menu('Eggs', 6.556, 'Bread', 10.48)
print()
print_shop_menu('Banana', 0.99, 'Juice', 2.50)
